version: '3'

vars:
  LOCATION: europe-west4
  PROJECT_ID: ae-terraform-2025
  REPOSITORY: ae-2025-registry
  TARGET_IMAGE: easyconvert-api
  TAG: latest
  PROXY_PORT: 8000
  CLOUD_RUN_NAME: easyconvert-api
  SERVICE_ACCOUNT_NAME: elif-github-actions-sa
  POOL_NAME: elif-github-actions-pool
  PROVIDER_NAME: github-provider
  GITHUB_USER: elifapa

tasks:
  gcloud:auth:
    desc: "Authenticate with Google Cloud"
    cmds:
      - echo "Authenticating with Google Cloud..."
      - gcloud auth application-default login

  gcloud:upload_file:
    desc: "Upload a file to Google Cloud Storage"
    vars:
      GCS_BUCKET:  elifapa-terraform-state
      GCS_PREFIX: env/dev/terraform/state
      TFVARS_FILE: dev.tfvars
    preconditions:
      - sh: test -f "{{.TFVARS_FILE}}"
        msg: "File {{.TFVARS_FILE}} not found."
    deps:
      - gcloud:auth
    cmds:
      - |
        DEST="gs://{{.GCS_BUCKET}}/{{.GCS_PREFIX}}/{{.TFVARS_FILE}}"
        echo "Uploading {{.TFVARS_FILE}} -> ${DEST}"
        gcloud storage cp "{{.TFVARS_FILE}}" "${DEST}"
        echo "Done."

  gcloud:wif:setup:
    desc: "Create Workload Identity Pool and Provider"
    cmds:
      - echo "Setting up Workload Identity Pool and Provider..."
      - |
        gcloud iam workload-identity-pools create {{.POOL_NAME}} \
          --location="global" \
          --display-name="Elif's Workload Identity Pool" \
          --description="Pool for GitHub Actions federation" \
          --project={{.PROJECT_ID}}
      - |
        gcloud iam workload-identity-pools providers create-oidc {{.PROVIDER_NAME}} \
          --project={{.PROJECT_ID}} \
          --location="global" \
          --workload-identity-pool={{.POOL_NAME}} \
          --display-name="GitHub Provider" \
          --attribute-mapping="google.subject=assertion.sub,attribute.actor=assertion.actor,attribute.repository=assertion.repository,attribute.repository_owner=assertion.repository_owner" \
          --attribute-condition="assertion.repository_owner=='elifapa'" \
          --issuer-uri="https://token.actions.githubusercontent.com"

  gcloud:wif:create-sa:
    desc: "Create service account for GitHub Actions"
    vars:
      ROLES: |
        roles/run.admin
        roles/storage.admin
        roles/cloudsql.client
        roles/cloudsql.admin
        roles/secretmanager.secretAccessor
        roles/artifactregistry.reader
        roles/artifactregistry.writer
        roles/logging.logWriter
        roles/serviceusage.serviceUsageAdmin
        roles/iam.serviceAccountAdmin
    cmds:
      - echo "👤 Creating service account..."
      - |
        if gcloud iam service-accounts describe {{.SERVICE_ACCOUNT_NAME}}@{{.PROJECT_ID}}.iam.gserviceaccount.com \
          --project={{.PROJECT_ID}} >/dev/null 2>&1; then
          echo "Service account {{.SERVICE_ACCOUNT_NAME}} already exists, skipping creation"
        else
          gcloud iam service-accounts create {{.SERVICE_ACCOUNT_NAME}} \
            --project={{.PROJECT_ID}} \
            --display-name="GitHub Actions Service Account"
          echo "✅ Service account created"
        fi
      - echo "🔐 Assigning roles to the service account..."
      - |
        # Convert roles to array and iterate
        echo "{{.ROLES}}" | while read -r role; do
          if [ -n "$role" ]; then
            echo "Adding role: $role"
            gcloud projects add-iam-policy-binding {{.PROJECT_ID}} \
              --member="serviceAccount:{{.SERVICE_ACCOUNT_NAME}}@{{.PROJECT_ID}}.iam.gserviceaccount.com" \
              --role="$role"
          fi
        done
      - echo "✅ All permissions granted"

  gcloud:wif:bind-sa:
    desc: "Bind service account to workload identity pool"
    # deps:
    #   - gcloud:wif:create-sa
    vars:
      PROJECT_NUMBER:
        sh: gcloud projects describe {{.PROJECT_ID}} --format="value(projectNumber)"
    cmds:
      - echo "🔗 Binding service account to workload identity pool..."
      - |
        gcloud iam service-accounts add-iam-policy-binding \
          {{.SERVICE_ACCOUNT_NAME}}@{{.PROJECT_ID}}.iam.gserviceaccount.com \
          --project={{.PROJECT_ID}} \
          --role=roles/iam.workloadIdentityUser \
          --member="principalSet://iam.googleapis.com/projects/{{.PROJECT_NUMBER}}/locations/global/workloadIdentityPools/{{.POOL_NAME}}/attribute.repository_owner/{{.GITHUB_USER}}"
      - echo "✅ Service account binding completed"


  gcloud:wif:get-provider-info:
    desc: Get workload identity provider information for GitHub Actions
    vars:
      PROJECT_NUMBER:
        sh: gcloud projects describe {{.PROJECT_ID}} --format="value(projectNumber)"
    cmds:
      - echo "📋 Getting provider information..."
      - |
        echo "🎯 Use these values in your GitHub Actions workflow:"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "workload_identity_provider: projects/{{.PROJECT_NUMBER}}/locations/global/workloadIdentityPools/{{.POOL_NAME}}/providers/{{.PROVIDER_NAME}}"
        echo "service_account: {{.SERVICE_ACCOUNT_NAME}}@{{.PROJECT_ID}}.iam.gserviceaccount.com"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

  docker:build:
    desc: "Build Docker image"
    dir: ~/projects/xcc-roman-converter-api
    vars:
      CURRENT_PWD:
        sh: pwd
      LOCAL_IMAGE: easyconvert-api
    cmds:
      - echo "Current directory -> {{.CURRENT_PWD}}"
      - echo "Building Docker image..."
      - docker build -t {{.LOCAL_IMAGE}} .

  docker:push:
    deps:
      - docker:build
    vars:
      LOCAL_IMAGE: easyconvert-api
    cmds:
      - echo "Pushing Docker image to Artifact Registry..."
      - task gcloud:auth
      - gcloud auth configure-docker {{.LOCATION}}-docker.pkg.dev
      - docker tag {{.LOCAL_IMAGE}} {{.LOCATION}}-docker.pkg.dev/{{.PROJECT_ID}}/{{.REPOSITORY}}/{{.TARGET_IMAGE}}:{{.TAG}}
      - docker push {{.LOCATION}}-docker.pkg.dev/{{.PROJECT_ID}}/{{.REPOSITORY}}/{{.TARGET_IMAGE}}:{{.TAG}}

  docker:deploy_gcloud:
    vars:
      TERRAFORM_PATH: terraform
    cmds:
      - echo "Listing images in GCP Artifact Registry..."
      - |
        gcloud artifacts docker images list \
          {{.LOCATION}}-docker.pkg.dev/{{.PROJECT_ID}}/{{.REPOSITORY}}/{{.TARGET_IMAGE}} --include-tags
      - |
        cd {{.TERRAFORM_PATH}}
        echo "Current directory -> $(pwd)"
        echo "Deploying the new image to Google Cloud Run with Terraform..."
        terraform apply
      - task proxy:deploy
    # deps:
    #   - docker:push

  docker:deploy_local:
    desc: "Test Docker image locally with Docker compose"
    vars:
      BUILD_IMAGE: "false"
    cmds:
      - echo "Testing Docker image locally with Docker compose..."
      - |
        if [ "{{.BUILD_IMAGE}}" = "true" ];
          then task docker:build;
        else echo "Skipping docker build";
        fi
      - docker compose up -d

  docker:remove:
    desc: "Remove all containers"
    cmds:
      - docker compose down

  proxy:deploy:
    cmds:
      - echo "Deploying Cloud Run Proxy..."
      - |
        gcloud run services proxy {{.CLOUD_RUN_NAME}} \
          --project {{.PROJECT_ID}} \
          --region {{.LOCATION}} \
          --port {{.PROXY_PORT}}
